<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A Hugo website</title>
    <link>/post/</link>
    <description>Recent content in Posts on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cows And Bulls</title>
      <link>/2020/04/20/cows-and-bulls/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/20/cows-and-bulls/</guid>
      <description>This is my take on the classic “Cows and Bulls” game written in R.
bulls_and_cows &amp;lt;-function() {generate_computer_vector &amp;lt;- function() {computer_sample &amp;lt;- sample(0:9,4) #generates computer vectorreturn(computer_sample)}get_guess &amp;lt;- function() {user_choice_is_good &amp;lt;- FALSEh &amp;lt;- 0while (user_choice_is_good==FALSE){if (i == i) {print(paste(&amp;quot;You have&amp;quot;, 11 - i, &amp;quot;guesses remaining.&amp;quot;))}numbers_string &amp;lt;- readline(&amp;quot;Please enter four numbers &amp;gt;&amp;quot;) #prompts user to make a guessuser_choice &amp;lt;- as.</description>
    </item>
    
    <item>
      <title>K Means Clustering In R</title>
      <link>/2020/04/20/k-means-clustering-in-r/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/20/k-means-clustering-in-r/</guid>
      <description>This is an exploration of K-Means Clustering using the Wine dataset provided by R.
We write an algorithm to create \(k=3\) clusters with \(m=50\) repititions.
data(wine, package=&amp;quot;rattle&amp;quot;)n &amp;lt;- 178# n is the number of data pointsk &amp;lt;- 3# k is the number of clustersp &amp;lt;- 13# p is the number of variables, once we have taken out the type variablem &amp;lt;- 50# m is the number of times the algorithm is repeated.</description>
    </item>
    
    <item>
      <title>Parallel Computing</title>
      <link>/2020/04/20/parallel-computing/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/20/parallel-computing/</guid>
      <description>This is an exploration of parallel computation, and its effects on run times. The below codes generate the same output, but one is calculated in parllel. The goal is to show that parallel computing, when used appropriately, can be a faster alternative.
library(doParallel)## Loading required package: foreach## Loading required package: iterators## Loading required package: parallellibrary(doRNG)## Loading required package: rngtools## Loading required package: pkgmaker## Loading required package: registry## ## Attaching package: &amp;#39;pkgmaker&amp;#39;## The following object is masked from &amp;#39;package:base&amp;#39;:## ## isFALSEset.</description>
    </item>
    
    <item>
      <title>Vector Math in Python and R</title>
      <link>/2020/04/20/vector-math-in-python-and-r/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/20/vector-math-in-python-and-r/</guid>
      <description>This is an exploration of vector math in R and Python. For the snippets in R, I have plotted the runtimes to compare speeds of vectorization vs non-vectorization.
#MX + NX + G in Pythondef python_element_mult():import numpy as npnp.random.seed(33)M = np.random.normal(0,1,(10,10))N = np.random.normal(0,1,(10,10))G = np.random.normal(0,1,(10,1))x = np.random.normal(0,1,(10,1))M_X = np.array([[0.0],[0.0],[0.0],[0.0],[0.0],[0.0],[0.0],[0.0],[0.0],[0.0]])for i in range(len(M)):for j in range(len(x[0])):for k in range(len(x)):M_X[i][j] += M[i][k] * x[k][j]N_X = np.</description>
    </item>
    
    <item>
      <title>NFL Data</title>
      <link>/2020/03/02/post-title/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/02/post-title/</guid>
      <description>R MarkdownPositionQBRBTEWR{&#34;map&#34;: {&#34;QB&#34;: [&#34;4&#34;, &#34;11&#34;, &#34;22&#34;, &#34;23&#34;, &#34;31&#34;, &#34;33&#34;, &#34;34&#34;, &#34;43&#34;, &#34;46&#34;, &#34;47&#34;, &#34;54&#34;, &#34;56&#34;, &#34;57&#34;, &#34;58&#34;, &#34;77&#34;, &#34;79&#34;, &#34;84&#34;, &#34;103&#34;, &#34;104&#34;, &#34;119&#34;, &#34;120&#34;, &#34;127&#34;, &#34;128&#34;, &#34;153&#34;, &#34;160&#34;, &#34;166&#34;, &#34;177&#34;, &#34;179&#34;, &#34;195&#34;, &#34;212&#34;, &#34;220&#34;, &#34;232&#34;, &#34;240&#34;, &#34;242&#34;, &#34;244&#34;, &#34;264&#34;, &#34;277&#34;, &#34;285&#34;, &#34;286&#34;, &#34;289&#34;, &#34;</description>
    </item>
    
  </channel>
</rss>